# -*- coding: utf-8 -*-
from django.contrib.auth.models import User
from django.db import models

from symposion.markdown_parser import parse

from conf_site.proposals.models import Proposal


class ProposalVote(models.Model):
    """
    Model to track votes made on a proposal.

    This model replaces symposion.reviews.models.Comment,
    symposion.reviews.models.Review, and symposion.reviews.models.LatestVote.

    Fields:
    proposal - The proposal associated with this vote.
    voter - The user that made the vote.
    score - The user's vote, represented as two characters.
    comment - The Markdown-formatted text of the vote's comment (optional).
    comment_html - An autogenerated HTML version of the vote's comment.
    date_created - The date/time that the vote was created.
    date_modified - The date/time that the vote was last modified.
    """

    # These values are based on the historical ones found in
    # symposion.reviews.models.score_expression().
    # This allows us to use integers directly which makes
    # calculating scores easier.
    SCORES = [
        (3, "+1 — Good proposal and I will argue for it to be accepted."),
        (1, "+0 — OK proposal, but I will not argue for it to be accepted."),
        (-1, "−0 — Weak proposal, but I will not argue against acceptance."),
        (-3, "−1 — Serious issues and I will argue to reject this proposal."),
    ]

    proposal = models.ForeignKey(
        Proposal, on_delete=models.CASCADE, related_name="review_votes"
    )
    voter = models.ForeignKey(
        User, on_delete=models.CASCADE, related_name="review_votes"
    )
    score = models.SmallIntegerField(blank=True, choices=SCORES)
    comment = models.TextField(blank=True)
    comment_html = models.TextField(blank=True, editable=False)
    date_created = models.DateTimeField(auto_now_add=True)
    date_modified = models.DateTimeField(auto_now=True)

    def save(self, *args, **kwargs):
        self.comment_html = parse(self.comment)
        return super(ProposalVote, self).save(*args, **kwargs)


class ProposalFeedback(models.Model):
    proposal = models.ForeignKey(
        Proposal, on_delete=models.CASCADE, related_name="review_feedback"
    )
    author = models.ForeignKey(
        User, on_delete=models.CASCADE, related_name="review_feedback"
    )
    comment = models.TextField(blank=True)
    comment_html = models.TextField(blank=True, editable=False)
    date_created = models.DateTimeField(auto_now_add=True)
    date_modified = models.DateTimeField(auto_now=True)

    def save(self, *args, **kwargs):
        self.comment_html = parse(self.comment)
        return super(ProposalFeedback, self).save(*args, **kwargs)


class ProposalResult(models.Model):
    """
    Model to track whether a proposal's acceptance and notification status.

    This model replaces symposion.reviews.models.ProposalResult and
    symposion.reviews.models.ResultNotification.
    """

    RESULT_STATUSES = [
        ("U", "Undecided"),
        ("A", "Accepted"),
        ("R", "Rejected"),
        ("S", "Standby"),
    ]

    proposal = models.OneToOneField(
        Proposal, on_delete=models.CASCADE, related_name="review_result"
    )
    status = models.CharField(
        choices=RESULT_STATUSES, default="U", max_length=1
    )
