# Generated by Django 2.2.9 on 2020-01-19 04:58

from django.db import migrations, models
import django.db.models.deletion
import taggit.managers


class Migration(migrations.Migration):

    replaces = [('proposals', '0001_initial'), ('proposals', '0002_proposaladditionalspeakerthrough'), ('proposals', '0003_remove_under_represented_questions')]

    dependencies = [
        ('symposion_proposals', '0003_standardize_markdown_links'),
        ('symposion_proposals', '0001_initial'),
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='ProposalKeyword',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Name')),
                ('slug', models.SlugField(max_length=100, unique=True, verbose_name='Slug')),
                ('official', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Keyword',
                'verbose_name_plural': 'Keywords',
            },
        ),
        migrations.CreateModel(
            name='TaggedProposal',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.IntegerField(db_index=True, verbose_name='Object id')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='proposals_taggedproposal_tagged_items', to='contenttypes.ContentType', verbose_name='Content type')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='proposals_taggedproposal_items', to='proposals.ProposalKeyword')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserTaggedProposal',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.IntegerField(db_index=True, verbose_name='Object id')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='proposals_usertaggedproposal_tagged_items', to='contenttypes.ContentType', verbose_name='Content type')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='proposals_usertaggedproposal_items', to='proposals.ProposalKeyword')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EditorTaggedProposal',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.IntegerField(db_index=True, verbose_name='Object id')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='proposals_editortaggedproposal_tagged_items', to='contenttypes.ContentType', verbose_name='Content type')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='proposals_editortaggedproposal_items', to='proposals.ProposalKeyword')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ProposalAdditionalSpeakerThrough',
            fields=[
            ],
            options={
                'constraints': [],
                'proxy': True,
                'verbose_name': 'Additional Speaker',
                'indexes': [],
            },
            bases=('symposion_proposals.additionalspeaker',),
        ),
        migrations.CreateModel(
            name='Proposal',
            fields=[
                ('proposalbase_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='symposion_proposals.ProposalBase')),
                ('audience_level', models.IntegerField(choices=[(1, 'Novice'), (3, 'Intermediate'), (2, 'Experienced')])),
                ('slides_url', models.URLField(blank=True, default='', help_text='Location of slides for this proposal (e.g. SlideShare, Google Drive).', max_length=2083, verbose_name='Slides')),
                ('code_url', models.URLField(blank=True, default='', help_text="Location of this proposal's code repository (e.g. Github).", max_length=2083, verbose_name='Repository')),
                ('first_time_at_pydata', models.CharField(blank=True, choices=[('', '----'), ('Y', 'Yes'), ('N', 'No'), ('O', 'Prefer not to say')], default='', max_length=1, verbose_name='Is this your first time speaking at a PyData event?')),
                ('affiliation', models.CharField(max_length=200)),
                ('phone_number', models.CharField(blank=True, default='', max_length=100, verbose_name='Phone number - to be used for last-minute schedule changes')),
                ('recording_release', models.BooleanField(default=True, help_text='By submitting your proposal, you agree to give permission to the conference organizers to record, edit, and release audio and/or video of your presentation. If you do not agree to this, please uncheck this box.')),
                ('date_created', models.DateTimeField(auto_now_add=True, null=True, verbose_name='Created')),
                ('date_last_modified', models.DateTimeField(auto_now=True, null=True, verbose_name='Last Modified')),
                ('editor_keywords', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', related_name='editor_tagged_proposals', through='proposals.EditorTaggedProposal', to='proposals.ProposalKeyword', verbose_name='Editor Keywords')),
                ('official_keywords', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', related_name='official_tagged_proposals', through='proposals.TaggedProposal', to='proposals.ProposalKeyword', verbose_name='Official Keywords')),
                ('user_keywords', taggit.managers.TaggableManager(blank=True, help_text='Please add keywords as a comma-separated list.', related_name='user_tagged_proposals', through='proposals.UserTaggedProposal', to='proposals.ProposalKeyword', verbose_name='Additional Keywords')),
            ],
            bases=('symposion_proposals.proposalbase',),
        ),
    ]
