- name: pull repository from Github to project directory
  git: accept_hostkey=yes
       dest={{ project_root }}
       repo=https://github.com/pydata/conf_site.git
       update=yes
       version={{ git_version }}
  become: true
  when: environment_type != "development"
  notify:
    - restart nginx
    - restart gunicorn

- name: install python packages and associated libraries
  apt: pkg={{ item }} state=present
  become: true
  with_items:
    - python-dev
    - python-pip
    - python-virtualenv
    - libffi-dev
    - libjpeg-dev
    - libssl-dev
    - libtiff-dev
    - libxml2
    - libxml2-dev
    - libxslt-dev
    - libxslt1-dev
    - zlib1g-dev
  notify: restart gunicorn

- name: change ownership of everything to this user
  file:
    path: "{{ project_root }}"
    recurse: yes
    owner: "{{ ansible_user_id }}"
    group: www-data
  become: true

- name: manually figure out latest Git commit
  command: git rev-parse HEAD chdir={{ project_root }}
  register: git_status

- name: determine if virtualenv exists
  stat: path={{ virtualenv_root }}/{{ git_status.stdout }}
  register: venv_dir

- name: create virtualenv if necessary
  shell: virtualenv {{ virtualenv_root }}/{{ git_status.stdout }}
  when: venv_dir.stat.isdir is not defined
  notify: delete other virtualenvs

- name: move old "current" symlink to "previous" if virtualenv has changed
  shell: mv
        {{ virtualenv_root }}/current
        {{ virtualenv_root }}/previous
  when: venv_dir.stat.isdir is not defined
  ignore_errors: yes

- name: use symlink for easier virtualenv management
  file: state=link
        path={{ virtualenv_root }}/current
        src={{ virtualenv_root }}/{{ git_status.stdout }}

- name: install latest version of pip
  shell: "{{ virtualenv_root }}/current/bin/pip install --upgrade pip"

- name: update virtualenv with requirements
  shell: >
    "{{ virtualenv_root }}/current/bin/pip"
    install -r {{ project_root }}/requirements/{{ environment_type }}.txt
    --upgrade
  notify: restart gunicorn

- name: add supervisor configuration file for gunicorn
  template: src=supervisor.conf
            dest=/etc/supervisor/conf.d/gunicorn.conf
  become: true
  notify:
    - restart supervisor
    - restart gunicorn

- name: create sensitive settings file
  template: src=sensitive-settings.py
            dest={{ project_root }}/conf_site/settings/secrets.py
            mode=0644
  notify: restart gunicorn

- name: database migrate
  django_manage: command="migrate"
                 app_path={{ project_root }}
                 settings=conf_site.settings.{{ environment_type }}
                 virtualenv={{ virtualenv_root }}/current
  notify: restart gunicorn

- name: figure out whether fixtures have already been applied
  stat:
    path: "{{ project_root }}/fixtures/.applied"
  register: fixtures_applied
  tags:
    - fixtures

# https://serverfault.com/a/616976/48777
- name: create list of fixture templates
  local_action: "shell ls roles/web/templates/fixtures/* | sed 's~.*/~~g'"
  register: fixture_templates
  tags:
    - fixtures

- name: create fixtures from templates
  template:
    dest: "{{ project_root }}/fixtures/{{ item }}"
    src: "templates/fixtures/{{ item }}"
  with_items: "{{ fixture_templates.stdout.splitlines() }}"
  when: fixtures_applied.stat.exists == False
  tags:
    - fixtures

- name: load fixtures
  django_manage:
    app_path: "{{ project_root }}"
    command: loaddata
    fixtures: "{{ project_root }}/fixtures/{{ item }}"
    settings: "conf_site.settings.{{ environment_type }}"
    virtualenv: "{{ virtualenv_root }}/current"
  with_items: "{{ fixture_templates.stdout.splitlines() }}"
  when: fixtures_applied.stat.exists == False
  notify: mark fixtures as applied
  tags:
    - fixtures

- name: collect static files
  django_manage: command="collectstatic --noinput --clear"
                 app_path={{ project_root }}
                 settings=conf_site.settings.{{ environment_type }}
                 virtualenv={{ virtualenv_root }}/current
  notify: restart nginx

- name: update review permissions
  django_manage: command=create_review_permissions
                 app_path={{ project_root }}
                 settings=conf_site.settings.{{ environment_type }}
                 virtualenv={{ virtualenv_root }}/current
  notify: restart gunicorn
